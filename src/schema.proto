// https://buf.build/cosmos/cosmos-sdk

syntax = "proto3";

message BlockID {
  message PartSetHeader {
    uint32 total = 1;
    bytes hash = 2;
  }

  bytes hash = 1;
  PartSetHeader parts = 2;
}

message Commit {
  message CommitSig {
    int32 block_id_flag = 1;
    bytes validator_address = 2;
    string timestamp = 3;
    bytes signature = 4;
  }

  int64 height = 1;
  int32 round = 2;
  BlockID block_id = 3;
  repeated CommitSig signatures = 4;
}

message Header {
  message Consensus {
    uint64 block = 1;
    uint64 app = 2;
  }

  Consensus version = 1;
  string chain_id = 2;
  int64 height = 3;
  string time = 4;
  BlockID last_block_id = 5;
  bytes last_commit_hash = 6;
  bytes data_hash = 7;
  bytes validators_hash = 8;
  bytes next_validators_hash = 9;
  bytes consensus_hash = 10;
  bytes app_hash = 11;
  bytes last_results_hash = 12;
  bytes evidence_hash = 13;
  bytes proposer_address = 14;
}

message Data {
  repeated bytes txs = 1;
}

message EvidenceList {
  enum SignedMsgType {
    SIGNED_MSG_TYPE_UNKNOWN = 0;
    SIGNED_MSG_TYPE_PREVOTE = 1;
    SIGNED_MSG_TYPE_PRECOMMIT = 2;
    SIGNED_MSG_TYPE_PROPOSAL = 32;
  }

  message Vote {
    SignedMsgType type = 1;
    int64 height = 2;
    int32 round = 3;
    BlockID block_id = 4;
    string timestamp = 5;
    bytes validator_address = 6;
    int32 validator_index = 7;
    bytes signature = 8;
  }

  message DuplicateVoteEvidence {
    Vote vote_a = 1;
    Vote vote_b = 2;
    int64 total_voting_power = 3;
    int64 validator_power = 4;
    string timestamp = 5;
  }

  message SignedHeader {
    Header header = 1;
    Commit commit = 2;
  }

  message ValidatorSet {
    repeated Validator validators = 1;
    Validator proposer = 2;
    int64 total_voting_power = 3;
  }

  message LightBlock {
    SignedHeader signed_header = 1;
    ValidatorSet validator_set = 2;
  }

  message PublicKey {
    oneof sum {
      bytes ed25519 = 1;
      bytes secp256k1 = 2;
    }
  }

  message Validator {
    bytes address = 1;
    PublicKey pub_key = 2;
    int64 voting_power = 3;
    int64 proposer_priority = 4;
  }

  message LightClientAttackEvidence {
    LightBlock conflicting_block = 1;
    int64 common_height = 2;
    repeated Validator byzantine_validators = 3;
    int64 total_voting_power = 4;
    string timestamp = 5;
  }

  message Evidence {
    oneof sum {
      DuplicateVoteEvidence duplicate_vote_evidence = 1;
      LightClientAttackEvidence light_client_attack_evidence = 2;
    }
  }

  repeated Evidence evidence = 1;
}

message Block {
  Header header = 1;
  Data data = 2;
  EvidenceList evidence = 3;
  Commit last_commit = 4;
}
